using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using OpenTK.Graphics.OpenGL;

namespace Tetris
{
    class Grafika : IDisposable
    {
        Bitmap bmp = new Bitmap(1, 1);
        public int ID { get; }
        public int W { get; }
        public int H { get; }
        public int CoordinateID { get; }
        public float[] Coordinate { get; }

        public Grafika(string fileName)
        {
            if (File.Exists(fileName))
            {
                bmp = (Bitmap)Image.FromFile(fileName);
                bmp.RotateFlip(RotateFlipType.RotateNoneFlipY);
            }
            W = bmp.Width;
            H = bmp.Height;
            BitmapData data = bmp.LockBits(new Rectangle(0, 0, W, H), ImageLockMode.ReadOnly,
                System.Drawing.Imaging.PixelFormat.Format32bppArgb);
            ID = GL.GenTexture();
            GL.BindTexture(TextureTarget.Texture2D, ID);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (uint)TextureMinFilter.Linear);
            GL.TexImage2D(TextureTarget.Texture2D, 0, PixelInternalFormat.Rgba, data.Width, data.Height, 0, 
                OpenTK.Graphics.OpenGL.PixelFormat.Bgra, PixelType.UnsignedByte, data.Scan0);
            GL.BindTexture(TextureTarget.Texture2D, 0);
            bmp.UnlockBits(data);
            Coordinate = new[]
            {
                0f, 1f,
                1f, 1f,
                1f, 0f,
                0f, 0f
            };
            CoordinateID = GL.GenBuffer();
            GL.BindBuffer(BufferTarget.ArrayBuffer, CoordinateID);
            GL.BufferData(BufferTarget.ArrayBuffer, Coordinate.Length * sizeof(float), Coordinate, BufferUsageHint.StaticDraw);
            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
        }
        public void Bind()
        {
            GL.BindTexture(TextureTarget.Texture2D, ID);
            GL.BindBuffer(BufferTarget.ArrayBuffer, CoordinateID);
            GL.TexCoordPointer(2, TexCoordPointerType.Float, 0, 0);
            
        }
        public void Unbind()
        {
            GL.BindTexture(TextureTarget.Texture2D, 0);
            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
        }
        public void Dispose()
        {
            GL.DeleteBuffer(CoordinateID);
            GL.DeleteTexture(ID);
        }
    }
}
